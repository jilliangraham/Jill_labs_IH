#List the number of films per category.
USE sakila;

SELECT category_id, COUNT(film_id) AS number_of_films
FROM film
INNER JOIN film_category
USING(film_id)
GROUP BY category_id;

#Retrieve the store ID, city, and country for each store.
SELECT store_id, city, country
FROM store
INNER JOIN address
USING(address_id)
INNER JOIN city
USING(city_id)
INNER JOIN country
USING(country_id);

#Calculate the total revenue generated by each store in dollars.
SELECT store_id, SUM(amount)
FROM store
INNER JOIN staff
USING(store_id)
INNER JOIN payment
USING(staff_id)
GROUP BY store_id;

#Determine the average running time of films for each category.
SELECT category_id, name, AVG(length)
FROM film
INNER JOIN film_category
USING(film_id)
INNER JOIN category
USING(category_id)
GROUP BY category_id;

#Identify the film categories with the longest average running time.
SELECT category_id, name, AVG(length)
FROM film
INNER JOIN film_category
USING(film_id)
INNER JOIN category
USING(category_id)
GROUP BY category_id 
ORDER BY AVG(length) DESC; 

#Display the top 10 most frequently rented movies in descending order.
#you want to see the film name, film_id, and pair it to the SUM(rental_dates) per rental_id
SELECT title, 
FROM rental
INNER JOIN inventory
USING(inventory_id)
INNER JOIN film
USING(film_id)
GROUP BY 
ORDER BY DESC; 


#Determine if "Academy Dinosaur" can be rented from Store 1.
#Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

